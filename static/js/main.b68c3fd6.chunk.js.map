{"version":3,"sources":["images/thor.jpeg","components/Header.js","services/MarvelService.js","components/Loader.js","components/RandomChar.js","components/CharList.js","components/CharInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","React","createElement","className","href","MarvelService","constructor","_this","_apiBase","_apiKey","_baseOffset","getResource","async","res","fetch","url","ok","Error","status","json","getAllCharacters","offset","arguments","length","undefined","data","results","map","_transformCharacter","getCharacter","this","id","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","Loader","width","height","viewBox","color","fill","xmlns","stop-opacity","stop-color","stroke-width","stroke","d","stroke-linecap","from","to","attributeName","type","repeatCount","dur","marvelService","RandomChar","loading","setLoading","useState","error","setError","setChar","changeText","text","str","i","slice","onError","spinner","errorMessage","content","src","thorImg","target","onClick","updateChar","Math","floor","random","then","newDesc","onCharLoaded","catch","CharList","_ref","onCharSerlected","charList","setCharList","setOffset","ended","setEnded","onCharListLoaded","newCharList","prevList","onRequest","currentOffset","useEffect","item","key","alt","loadMoreCharacters","newOffset","style","CharInfo","charId","isSticky","setIsSticky","handleScroll","scrollPosition","window","scrollY","addEventListener","removeEventListener","comic","index","position","App","selectedChar","setSelectedChar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,0LCa5BC,MAXf,WACI,OACIC,IAAAC,cAAA,OAAKC,UAAU,qCACXF,IAAAC,cAAA,MAAIC,UAAU,sBAAqBF,IAAAC,cAAA,QAAMC,UAAU,gBAAe,UAAa,uBAC/EF,IAAAC,cAAA,OAAKC,UAAU,sBACXF,IAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,wCAAuC,cAAc,MAAGF,IAAAC,cAAA,KAAGC,UAAU,uCAAuCC,KAAK,KAAI,a,gBC0B5IC,MAjCf,MAAoBC,cAAA,IAAAC,EAAA,UAChBC,SAAW,sDAAqD,KAChEC,QAAU,mCAAkC,KAC5CC,YAAc,IAAG,KAEjBC,YAAcC,UACV,IAAIC,QAAYC,MAAMC,GACtB,IAAKF,EAAIG,GACL,MAAM,IAAIC,MAAM,mBAAmBF,cAAgBF,EAAIK,UAE3D,aAAaL,EAAIM,QACpB,KACDC,iBAAmBR,iBAAsC,IAA/BS,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGf,EAAKG,YACpC,MAAMG,QAAYN,EAAKI,YAAY,GAAGJ,EAAKC,2BAA2Ba,YAAiBd,EAAKE,WAC5F,OAAOI,EAAIY,KAAKC,QAAQC,IAAIpB,EAAKqB,sBACpC,KACDC,aAAejB,UACX,MAAMC,QAAYiB,KAAKnB,YAAY,uDAAuDoB,YAAaD,KAAKrB,WAC5G,OAAOqB,KAAKF,oBAAoBf,EAAIY,KAAKC,QAAQ,KACpD,KAEDE,oBAAuBI,IACZ,CACHD,GAAIC,EAAKD,GACTE,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAClBC,UAAWH,EAAKG,UAAUC,KAAM,IAAKJ,EAAKG,UAAUE,UACpDC,SAAUN,EAAKO,KAAK,GAAGxB,IACvByB,KAAMR,EAAKO,KAAK,GAAGxB,IACnB0B,OAAQT,EAAKS,OAAOC,UC5BjB,SAASC,IACpB,OACI1C,IAAAC,cAAA,OACI0C,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,MAAM,UACNC,KAAK,OACLC,MAAM,8BAENhD,IAAAC,cAAA,YACID,IAAAC,cAAA,kBAAgB6B,GAAG,sBACf9B,IAAAC,cAAA,QAAMmB,OAAO,KAAK6B,eAAa,IAAIC,aAAW,iBAC9ClD,IAAAC,cAAA,QAAMmB,OAAO,OAAO6B,eAAa,MAAMC,aAAW,kBAEtDlD,IAAAC,cAAA,kBAAgB6B,GAAG,qBACf9B,IAAAC,cAAA,QAAMmB,OAAO,KAAK6B,eAAa,IAAIC,aAAW,iBAC9ClD,IAAAC,cAAA,QAAMmB,OAAO,OAAO6B,eAAa,MAAMC,aAAW,mBAI1DlD,IAAAC,cAAA,KAAGkD,eAAa,KACZnD,IAAAC,cAAA,QAAMmD,OAAO,2BAA2BC,EAAE,kCAC1CrD,IAAAC,cAAA,QAAMmD,OAAO,0BAA0BC,EAAE,kCACzCrD,IAAAC,cAAA,QACImD,OAAO,eACPE,iBAAe,QACfD,EAAE,gCAIVrD,IAAAC,cAAA,oBACIsD,KAAK,QACLC,GAAG,UACHC,cAAc,YACdC,KAAK,SACLC,YAAY,aACZC,IAAI,YCjCpB,MAAMC,EAAgB,IAAIzD,EA4EX0D,MA1Ef,WACI,MAAOC,EAASC,GAAcC,oBAAS,IAChCC,EAAOC,GAAYF,oBAAS,IAC5BlC,EAAMqC,GAAWH,mBAAS,IAW3BI,EAAcC,IAEhB,IAAIC,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAFA,IAEeA,IACvBF,EAAKE,KAAID,GAAOD,EAAKE,IAE7B,OAAOD,EAAIE,MAAM,GAAI,GAAK,OAExBC,EAAUA,KACZV,GAAW,GACXG,GAAS,IAaPQ,EAAUZ,EAAU/D,IAAAC,cAAA,OAAKC,UAAU,mDAAkDF,IAAAC,cAACyC,EAAM,OAAY,KACxGkC,EAAeV,EAAQlE,IAAAC,cAAA,OAAKC,UAAU,yEAAwE,uCAAMF,IAAAC,cAAA,WAAM,+FAAyB,KACnJ4E,EAAYX,GAASH,EAgBrB,KAfF/D,IAAAC,cAAA,OAAKC,UAAU,4DACXF,IAAAC,cAAA,OAAKC,UAAU,sBAAsB4E,IAAK/C,EAAKG,UAAYH,EAAKG,UAAY6C,MAC5E/E,IAAAC,cAAA,OAAKC,UAAU,oEACXF,IAAAC,cAAA,WACID,IAAAC,cAAA,MAAIC,UAAU,0BAA0B6B,EAAKC,KAAOD,EAAKC,KAAO,QAChEhC,IAAAC,cAAA,OAAKC,UAAU,IACV6B,EAAKE,YAAcF,EAAKE,YAAc,4OAG/CjC,IAAAC,cAAA,OAAKC,UAAU,0CACXF,IAAAC,cAAA,KAAGC,UAAU,+GAA+G8E,OAAO,SAAS7E,KAAM4B,EAAKM,SAAWN,EAAKM,SAAW,MAAM,YACxLrC,IAAAC,cAAA,KAAGC,UAAU,gHAAgH8E,OAAO,SAAS7E,KAAM4B,EAAKQ,KAAOR,EAAKQ,KAAO,MAAM,WAMjM,OACIvC,IAAAC,cAAA,OAAKC,UAAU,wDACVyE,EACAC,EACAC,EACD7E,IAAAC,cAAA,OAAKC,UAAU,4HACXF,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAAA,WAAK,8BAA2BD,IAAAC,cAAA,WAAM,0CACtCD,IAAAC,cAAA,WAAK,yBACLD,IAAAC,cAAA,UAAQgF,QAvCLC,KACXhB,GAAOC,GAAS,GACpB,MAAMrC,EAAKqD,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DxB,EAAcjC,aAAaE,GACtBwD,KAAK1E,IA1BQmB,KAElB,GADAqC,EAAQrC,GACiB,KAArBA,EAAKE,YAAoB,CACzB,IAAIsD,EAAUlB,EAAWtC,EAAKE,aAC9BmC,EAAQ,IAAKrC,EAAME,YAAasD,SAC7BnB,EAAQ,IAAKrC,EAAME,YAAa,6BACvC+B,GAAW,IAqBHwB,CAAa5E,KAEhB6E,MAAMf,GACXV,GAAW,IA+B8B9D,UAAU,sFAAqF,eCrEhJ,MAAM2D,EAAgB,IAAIzD,EA4FXsF,MA1Ff,SAAiBC,GAAuB,IAAtB,gBAAEC,GAAiBD,EACjC,MAAO5B,EAASC,GAAcC,oBAAS,IAChCC,EAAOC,GAAYF,oBAAS,IAC5B4B,EAAUC,GAAe7B,mBAAS,KAClC7C,EAAQ2E,GAAa9B,mBAAS,MAC9B+B,EAAOC,GAAYhC,oBAAS,GAE7BiC,EAAoBC,IAClBA,EAAY7E,OAAS,GACrB2E,GAAS,GAEbH,EAAaM,GAAa,IAAIA,KAAaD,IAC3CnC,GAAW,IAGTU,EAAUA,KACZV,GAAW,GACXG,GAAS,IAGPkC,EAAaC,IACftC,GAAW,GACXG,GAAS,GACTN,EACK1C,iBAAiBmF,GACjBhB,KAAKY,GACLT,MAAMf,IAaf,OAJA6B,oBAAU,KACNF,EAAUjF,IACX,IAGCpB,IAAAC,cAAA,OAAKC,UAAU,cACV6D,GAA+B,IAApB8B,EAASvE,OACjBtB,IAAAC,cAAA,OAAKC,UAAU,0DACXF,IAAAC,cAACyC,EAAM,OAGX1C,IAAAC,cAAA,MAAIC,UAAU,mCACT2F,EAASnE,IAAK8E,GACXxG,IAAAC,cAAA,MACIwG,IAAKD,EAAK1E,GACVmD,QAASA,IAAMW,EAAgBY,EAAK1E,IACpC5B,UAAU,sJAEVF,IAAAC,cAAA,OACIC,UAAU,mCACV4E,IAAK0B,EAAKtE,UACVwE,IAAKF,EAAKxE,OAEdhC,IAAAC,cAAA,OAAKC,UAAU,0DACVsG,EAAKxE,SAMzBkC,GACGlE,IAAAC,cAAA,OAAKC,UAAU,2CAA0C,6NAI3D6D,GACE/D,IAAAC,cAAA,OAAKC,UAAU,6BACXF,IAAAC,cAAA,UACIgF,QA5CO0B,KACvB,MAAMC,EAAYxF,EAAS,EAC3B2E,EAAUa,GACVP,EAAUO,IA0CM1G,UAAU,+HACV2G,MAAO,CAAC,QAAWb,EAAQ,OAAS,UACvC,cAKRjC,GAAW8B,EAASvE,OAAS,GAC1BtB,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAACyC,EAAM,SCiBZoE,MArGf,SAAiBnB,GAAc,IAAb,OAAEoB,GAAQpB,EACxB,MAAO5B,EAASC,GAAcC,oBAAS,IAChCC,EAAOC,GAAYF,oBAAS,IAC5BlC,EAAMqC,GAAWH,mBAAS,KAC1B+C,EAAUC,GAAehD,oBAAS,GACnCJ,EAAgB,IAAIzD,EAcpBsE,EAAUA,KACZV,GAAW,GACXG,GAAS,IAGPqB,EAAgBzD,IAClBqC,EAAQrC,GACRiC,GAAW,IAGfuC,oBAAU,KArBDQ,IAEL/C,GAAW,GACXG,GAAS,GAETN,EACKjC,aAAamF,GACbzB,KAAKE,GACLC,MAAMf,KAeZ,CAACqC,IAEJR,oBAAU,KACN,MAAMW,EAAeA,KACjB,MAAMC,EAAiBC,OAAOC,QAE9BJ,EAAYE,EADY,MAM5B,OAFAC,OAAOE,iBAAiB,SAAUJ,GAE3B,KACHE,OAAOG,oBAAoB,SAAUL,KAE1C,IAEH,MAAMvC,EAAUZ,EACZ/D,IAAAC,cAAA,OAAKC,UAAU,mDAAkDF,IAAAC,cAACyC,EAAM,OACxE,KAEEkC,EAAeV,EACjBlE,IAAAC,cAAA,OAAKC,UAAU,yEAAwE,uCAC7EF,IAAAC,cAAA,WAAM,+FAEhB,KAEE4E,EAAYX,GAASH,IAAYhC,EA4BnC,KA3BA/B,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKC,UAAU,2DACXF,IAAAC,cAAA,OAAKC,UAAU,sBAAsB4E,IAAK/C,EAAKG,UAAYH,EAAKG,UAAY6C,IAAS2B,IAAK3E,EAAKC,MAAQ,cACvGhC,IAAAC,cAAA,WACID,IAAAC,cAAA,MAAIC,UAAU,2BAA2B6B,EAAKC,MAAQ,kBACtDhC,IAAAC,cAAA,OAAKC,UAAU,iEACXF,IAAAC,cAAA,KAAG+E,OAAO,SAAS7E,KAAM4B,EAAKM,SAAWN,EAAKM,SAAW,KAAMnC,UAAU,6HAA4H,YAGrMF,IAAAC,cAAA,KAAG+E,OAAO,SAAS7E,KAAM4B,EAAKQ,KAAOR,EAAKQ,KAAO,KAAMrC,UAAU,8HAA6H,WAM1MF,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,KAAGC,UAAU,yBACR6B,EAAKE,aAAe,6BAEzBjC,IAAAC,cAAA,MAAIC,UAAU,0BAAyB,WACvCF,IAAAC,cAAA,MAAIC,UAAU,mCACT6B,EAAKS,OAAST,EAAKS,OAAOiC,MAAM,EAAG,IAAI/C,IAAI,CAAC8F,EAAOC,IAChDzH,IAAAC,cAAA,MAAIwG,IAAKgB,GAAQD,EAAMxF,OACtBhC,IAAAC,cAAA,UAAI,0BAMzB,OACID,IAAAC,cAAA,OACIC,UAAW,wEACP8G,EAAW,mBAAqB,IAEpCH,MAAQG,EAAsC,GAA3B,CAAEU,SAAU,aAE9B/C,EACAC,EACAC,ICvEE8C,MAvBf,WAEE,MAAOC,EAAcC,GAAmB5D,mBAAS,MAKjD,OACEjE,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,iCACbF,IAAAC,cAACF,EAAM,MACPC,IAAAC,cAAC6D,EAAU,MACX9D,IAAAC,cAAA,OAAKC,UAAU,yCACbF,IAAAC,cAACyF,EAAQ,CAACE,gBATO9D,IACvB+F,EAAgB/F,MASV9B,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAC6G,EAAQ,CAACC,OAAQa,SCVVE,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnI,IAAAC,cAAC0H,EAAG,MAAKS,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAKmD,IACjCA,EAAaC,iB","file":"static/js/main.b68c3fd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thor.fa647f80.jpeg\";","import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='flex items-center justify-between'>\r\n            <h1 className='font-bold text-2xl'><span className='text-red-800'>Marvel</span> information portal</h1>\r\n            <div className='font-bold text-2xl'>\r\n                <a href='#' className='hover:text-red-800 transition-colors'>Characters</a> / <a className='hover:text-red-800 transition-colors' href='#'>Comics</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","class MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/characters'\r\n    _apiKey = 'c53ce60532cf8c95393aeba624ea0c32'\r\n    _baseOffset = 210\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url)\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`)\r\n        }\r\n        return await res.json()\r\n    }\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res = await this.getResource(`${this._apiBase}?limit=9&offset=${offset}&apikey=${this._apiKey}`)\r\n        return res.data.results.map(this._transformCharacter)\r\n    }\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=${this._apiKey}`)\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path +'.'+ char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\nexport default MarvelService","import React from \"react\"\r\nexport default function Loader() {\r\n    return (\r\n        <svg\r\n            width=\"200\"\r\n            height=\"200\"\r\n            viewBox=\"0 0 200 200\"\r\n            color=\"#3f51b5\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n            <defs>\r\n                <linearGradient id=\"spinner-secondHalf\">\r\n                    <stop offset=\"0%\" stop-opacity=\"0\" stop-color=\"currentColor\" />\r\n                    <stop offset=\"100%\" stop-opacity=\"0.5\" stop-color=\"currentColor\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"spinner-firstHalf\">\r\n                    <stop offset=\"0%\" stop-opacity=\"1\" stop-color=\"currentColor\" />\r\n                    <stop offset=\"100%\" stop-opacity=\"0.5\" stop-color=\"currentColor\" />\r\n                </linearGradient>\r\n            </defs>\r\n\r\n            <g stroke-width=\"8\">\r\n                <path stroke=\"url(#spinner-secondHalf)\" d=\"M 4 100 A 96 96 0 0 1 196 100\" />\r\n                <path stroke=\"url(#spinner-firstHalf)\" d=\"M 196 100 A 96 96 0 0 1 4 100\" />\r\n                <path\r\n                    stroke=\"currentColor\"\r\n                    stroke-linecap=\"round\"\r\n                    d=\"M 4 100 A 96 96 0 0 1 4 98\"\r\n                />\r\n            </g>\r\n\r\n            <animateTransform\r\n                from=\"0 0 0\"\r\n                to=\"360 0 0\"\r\n                attributeName=\"transform\"\r\n                type=\"rotate\"\r\n                repeatCount=\"indefinite\"\r\n                dur=\"1300ms\"\r\n            />\r\n        </svg>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport thorImg from '../images/thor.jpeg'\r\nimport MarvelService from '../services/MarvelService';\r\nimport Loader from './Loader';\r\n\r\nconst marvelService = new MarvelService();\r\n\r\nfunction RandomChar() {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [char, setChar] = useState({})\r\n    \r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n        if (char.description !== '') {\r\n            let newDesc = changeText(char.description)\r\n            setChar({ ...char, description: newDesc })\r\n        } else setChar({ ...char, description: 'No description available' })\r\n        setLoading(false)\r\n    }\r\n\r\n    const changeText = (text) => {\r\n        var maxlength = 200;\r\n        let str = ''\r\n        for (let i = 0; i < maxlength; i++) {\r\n            if (text[i]) str += text[i]\r\n        }\r\n        return str.slice(0, -3) + '...'\r\n    }\r\n    const onError = () => {\r\n        setLoading(false)\r\n        setError(true)\r\n    }\r\n\r\n    const updateChar = () => {\r\n        if (error) setError(false)\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n        marvelService.getCharacter(id)\r\n            .then(res => {\r\n                onCharLoaded(res)\r\n            })\r\n            .catch(onError)\r\n        setLoading(true)\r\n    }\r\n    const spinner = loading ? <div className='flex justify-center content-center items-center'><Loader /></div> : null\r\n    const errorMessage = error ? <div className='flex justify-center content-center items-center text-center font-bold'>Ошибка<br />Попробуйте снова</div> : null\r\n    const content = !(error || loading) ?\r\n        <div className='p-5 grid grid-flow-col justify-start gap-4 items-stretch'>\r\n            <img className='w-[200px] h-[200px]' src={char.thumbnail ? char.thumbnail : thorImg} />\r\n            <div className='h-[200px] grid grid-cols-1 gap-4 content-between justify-between'>\r\n                <div>\r\n                    <h2 className='text-xl font-bold mb-2'>{char.name ? char.name : 'THOR'}</h2>\r\n                    <div className=''>\r\n                        {char.description ? char.description : 'As the Norse God of thunder and lightning, Thor wields one of the greatest weapons ever made, the enchanted hammer Mjolnir. While others have described Thor as an over-muscled, oafish imbecile, he\\'s quite smart and compassionate...'}\r\n                    </div>\r\n                </div>\r\n                <div className='grid grid-flow-col gap-4 justify-start'>\r\n                    <a className='cursor-pointer font-medium text-sm w-max py-3 px-5 text-white bg-red-700 transition-all hover:-translate-y-1' target='_blank' href={char.homepage ? char.homepage : null}>HOMEPAGE</a>\r\n                    <a className='cursor-pointer font-medium bg-zinc-800 text-sm text-white w-max py-3 px-5 transition-all hover:-translate-y-1' target='_blank' href={char.wiki ? char.wiki : null}>WIKI</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        : null\r\n\r\n    return (\r\n        <div className='shadow-xl grid grid-cols-2 grid-rows-1 mt-10 text-sm'>\r\n            {spinner}\r\n            {errorMessage}\r\n            {content}\r\n            <div className='randomchar min-h-[245px] bg-zinc-800 text-white p-5 grid grid-cols-1 relative content-between text-xl font-bold relative'>\r\n                <div className='h-[200px] grid items-end'>\r\n                    <div>Random character for today!<br />Do you want to get to know him better?</div>\r\n                    <div>Or choose another one</div>\r\n                    <button onClick={updateChar} className='text-sm font-medium w-max py-3 px-5 bg-red-700 transition-all hover:-translate-y-1'>TRY IT!</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomChar;","import React, { useEffect, useState } from 'react';\r\nimport Loader from './Loader';\r\nimport MarvelService from '../services/MarvelService';\r\n\r\nconst marvelService = new MarvelService();\r\n\r\nfunction CharList({ onCharSerlected }) {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [charList, setCharList] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n    const [ended, setEnded] = useState(false)\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        if (newCharList.length < 9) {\r\n            setEnded(true)\r\n        }\r\n        setCharList((prevList) => [...prevList, ...newCharList]);\r\n        setLoading(false);\r\n    };\r\n\r\n    const onError = () => {\r\n        setLoading(false);\r\n        setError(true);\r\n    };\r\n\r\n    const onRequest = (currentOffset) => {\r\n        setLoading(true);\r\n        setError(false);\r\n        marvelService\r\n            .getAllCharacters(currentOffset)\r\n            .then(onCharListLoaded)\r\n            .catch(onError);\r\n    };\r\n\r\n    const loadMoreCharacters = () => {\r\n        const newOffset = offset + 9;\r\n        setOffset(newOffset);\r\n        onRequest(newOffset);\r\n    };\r\n\r\n    useEffect(() => {\r\n        onRequest(offset);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"col-span-3\">\r\n            {loading && charList.length === 0 ? (\r\n                <div className=\"inset-0 flex justify-center items-center bg-opacity-75\">\r\n                    <Loader />\r\n                </div>\r\n            ) : (\r\n                <ul className=\"grid grid-cols-3 gap-4 relative\">\r\n                    {charList.map((item) => (\r\n                        <li\r\n                            key={item.id}\r\n                            onClick={() => onCharSerlected(item.id)}\r\n                            className=\"max-w-[200px] break-words grid grid-flow-row content-start w-max transition-all hover:-translate-y-1 shadow-xl hover:shadow-red-400 cursor-pointer\"\r\n                        >\r\n                            <img\r\n                                className=\"h-[200px] w-[200px] object-cover\"\r\n                                src={item.thumbnail}\r\n                                alt={item.name}\r\n                            />\r\n                            <div className=\"bg-zinc-800 text-white text-xl font-bold h-[100px] p-2\">\r\n                                {item.name}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n            {error && (\r\n                <div className=\"text-center text-red-500 font-bold mt-4\">\r\n                    Ошибка загрузки данных. Попробуйте снова.\r\n                </div>\r\n            )}\r\n            {!loading && (\r\n                <div className=\"flex justify-center mt-10\">\r\n                    <button\r\n                        onClick={loadMoreCharacters}\r\n                        className=\"cursor-pointer font-medium text-sm w-[400px] py-3 px-5 text-white bg-red-700 transition-all hover:-translate-y-1 text-center\"\r\n                        style={{'display': ended ? 'none' : 'block'}}\r\n                    >\r\n                        LOAD MORE\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {loading && charList.length > 0 && (\r\n                <div className=\"flex justify-center mt-4\">\r\n                    <Loader />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport thorImg from '../images/thor.jpeg';\r\nimport MarvelService from '../services/MarvelService';\r\nimport Loader from './Loader';\r\n\r\nfunction CharInfo({ charId }) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [char, setChar] = useState({});\r\n    const [isSticky, setIsSticky] = useState(false);\r\n    const marvelService = new MarvelService();\r\n\r\n    const updateChar = () => {\r\n        if (!charId) return;\r\n\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        marvelService\r\n            .getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .catch(onError);\r\n    };\r\n\r\n    const onError = () => {\r\n        setLoading(false);\r\n        setError(true);\r\n    };\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [charId]);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            const scrollPosition = window.scrollY;\r\n            const stickyThreshold = 400; // Порог, после которого элемент становится фиксированным\r\n            setIsSticky(scrollPosition > stickyThreshold);\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    const spinner = loading ? (\r\n        <div className='flex justify-center content-center items-center'><Loader /></div>\r\n    ) : null;\r\n\r\n    const errorMessage = error ? (\r\n        <div className='flex justify-center content-center items-center text-center font-bold'>\r\n            Ошибка<br />Попробуйте снова\r\n        </div>\r\n    ) : null;\r\n\r\n    const content = !(error || loading || !char) ? (\r\n        <div>\r\n            <div className=\"grid grid-cols-2 gap-4 items-center justify-items-start\">\r\n                <img className=\"w-[200px] h-[200px]\" src={char.thumbnail ? char.thumbnail : thorImg} alt={char.name || \"Character\"} />\r\n                <div>\r\n                    <h2 className=\"text-2xl font-bold mb-4\">{char.name || \"Character Name\"}</h2>\r\n                    <div className=\"mt-4 grid grid-flow-row grid-cols-1 gap-4 justify-items-start\">\r\n                        <a target='_blank' href={char.homepage ? char.homepage : null} className=\"cursor-pointer font-medium text-sm w-full py-3 px-5 text-white bg-red-700 transition-all hover:-translate-y-1 text-center\">\r\n                            HOMEPAGE\r\n                        </a>\r\n                        <a target='_blank' href={char.wiki ? char.wiki : null} className=\"cursor-pointer font-medium text-sm w-full py-3 px-5 text-white bg-zinc-800 transition-all hover:-translate-y-1 text-center\">\r\n                            WIKI\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-6\">\r\n                <p className=\"text-gray-700 text-sm\">\r\n                    {char.description || \"No description available.\"}\r\n                </p>\r\n                <h3 className=\"text-xl font-bold mb-2\">Comics:</h3>\r\n                <ul className=\"list-disc text-sm text-gray-700\">\r\n                    {char.comics ? char.comics.slice(0, 20).map((comic, index) => (\r\n                        <li key={index}>{comic.name}</li>\r\n                    )) : <li>No comics available</li>}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    ) : null;\r\n\r\n    return (\r\n        <div\r\n            className={`shadow-md bg-white p-6 rounded-lg h-min transition-all duration-300 ${\r\n                isSticky ? 'fixed top-4 z-50' : ''\r\n            }`}\r\n            style={!isSticky ? { position: 'relative' } : {}}\r\n        >\r\n            {spinner}\r\n            {errorMessage}\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharInfo;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport RandomChar from './components/RandomChar';\nimport CharList from './components/CharList';\nimport CharInfo from './components/CharInfo';\n\nfunction App() {\n\n  const [selectedChar, setSelectedChar] = useState(null)\n\n  const onCharSerlected = (id) => {\n    setSelectedChar(id)\n}\n  return (\n    <div className=\"App\">\n      <div className='w-[1175px] mx-auto px-3 py-12'>\n        <Header />\n        <RandomChar />\n        <div className=\"grid grid-cols-5 gap-8 mt-20 h-screen\">\n          <CharList onCharSerlected={onCharSerlected}/>\n          <div className='col-span-2 relative'>\n            <CharInfo charId={selectedChar}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}